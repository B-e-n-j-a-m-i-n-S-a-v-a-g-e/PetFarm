var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Sex;
(function (Sex) {
    Sex[Sex["male"] = 0] = "male";
    Sex[Sex["female"] = 1] = "female";
})(Sex || (Sex = {}));
;
var HairLength;
(function (HairLength) {
    HairLength[HairLength["short"] = 0] = "short";
    HairLength[HairLength["medium"] = 1] = "medium";
    HairLength[HairLength["long"] = 2] = "long";
})(HairLength || (HairLength = {}));
;
var Color;
(function (Color) {
    Color[Color["brown"] = 0] = "brown";
    Color[Color["white"] = 1] = "white";
    Color[Color["black"] = 2] = "black";
    Color[Color["tan"] = 3] = "tan";
    Color[Color["grey"] = 4] = "grey";
})(Color || (Color = {}));
;
var Direction;
(function (Direction) {
    Direction[Direction["north"] = 0] = "north";
    Direction[Direction["south"] = 1] = "south";
    Direction[Direction["east"] = 2] = "east";
    Direction[Direction["west"] = 3] = "west";
})(Direction || (Direction = {}));
;
var GuineaPig = (function (_super) {
    __extends(GuineaPig, _super);
    function GuineaPig(name, sex, color, hairLength, foodCapacity, x, y) {
        _super.call(this);
        this.type = "GuineaPig";
        this.length = 20;
        this.width = 10;
        this.foodLevel = 4;
        this.foodCapacity = 20;
        //You might be wondering why on Earth this exists. Needed because the cleaner will iterate through the poop 
        //generated by each pig and clean it.
        this.poopAmount = 0;
        this.currentDirection = Direction.north;
        this.pos = new Vector2D(x, y);
        this.name = name;
        this.sex = sex;
        this.color = color;
        this.hairLength = hairLength;
        this.foodCapacity = foodCapacity;
        this.pos.setX(x);
        this.pos.setY(y);
        this.skills = [];
    }
    GuineaPig.prototype.getName = function () {
        return this.name;
    };
    GuineaPig.prototype.setName = function (name) {
        this.name = name;
    };
    GuineaPig.prototype.getSex = function () {
        return this.sex;
    };
    GuineaPig.prototype.getColor = function () {
        return this.color;
    };
    GuineaPig.prototype.getHairLength = function () {
        return this.hairLength;
    };
    GuineaPig.prototype.getFoodLevel = function () {
        return this.foodLevel;
    };
    GuineaPig.prototype.setFoodLevel = function (newLevel) {
        this.foodLevel = newLevel;
    };
    GuineaPig.prototype.getFoodCapacity = function () {
        return this.foodCapacity;
    };
    GuineaPig.prototype.getX = function () {
        return this.pos.x;
    };
    GuineaPig.prototype.setX = function (x) {
        this.pos.x = x;
    };
    GuineaPig.prototype.getY = function () {
        return this.pos.y;
    };
    GuineaPig.prototype.setY = function (y) {
        this.pos.y = y;
    };
    GuineaPig.prototype.getLength = function () {
        return this.length;
    };
    GuineaPig.prototype.getWidth = function () {
        return this.width;
    };
    GuineaPig.prototype.getPoopAmount = function () {
        return this.poopAmount;
    };
    GuineaPig.prototype.setPoopAmount = function (amount) {
        this.poopAmount = amount;
    };
    GuineaPig.prototype.getCurrentDirection = function () {
        return this.currentDirection;
    };
    GuineaPig.prototype.setCurrentDirection = function (direction) {
        this.currentDirection = direction;
    };
    GuineaPig.prototype.move = function (direction) {
        switch (direction) {
            case Direction.north:
                this.pos.y -= 1;
                break;
            case Direction.south:
                this.pos.y += 1;
                break;
            case Direction.east:
                this.pos.x += 1;
                break;
            case Direction.west:
                this.pos.x -= 1;
                break;
            default:
                throw new Error("Direction not found");
        }
    };
    GuineaPig.prototype.eat = function (quantity) {
        console.log(this.name + " has eaten " + quantity + " of food.");
        this.foodLevel += quantity;
    };
    //A guinea pig makes a BWEEP sound when it's hungry
    GuineaPig.prototype.bweep = function (numBweeps) {
        for (var i = 0; i < numBweeps; i++) {
            console.log(this.name + " says " + "BWEEEEEEEEEEEEEEEEEEPPP!");
        }
    };
    GuineaPig.prototype.poop = function (quantity) {
        var pigPronoun;
        if (this.getSex() === Sex.male) {
            pigPronoun = "his";
        }
        else {
            pigPronoun = "her";
        }
        if (this.foodLevel > 0) {
            this.foodLevel -= quantity;
            this.poopAmount += quantity;
        }
        else {
            console.log("Poor little " + this.name + " has no more food in " + pigPronoun + " belly.");
        }
    };
    GuineaPig.prototype.addSkill = function (skill) {
        this.skills.push(skill);
    };
    GuineaPig.prototype.performSkill = function (skill) {
        console.log(skill);
    };
    GuineaPig.prototype.performAllSkills = function () {
        for (var i = 0; i < this.skills.length; i++) {
            console.log(this.skills[i]);
        }
    };
    GuineaPig.prototype.mate = function (partner) {
        var randomValue = Math.floor(Math.random() * 10);
        var sex;
        var hairLength;
        var color;
        var foodCapacity;
        //Grabbing the first three letters of each parent's name + mashing them together to make baby's name.
        var name = this.name.substring(0, 3) + partner.getName().substring(0, 3);
        //If < 5, pig will have attributes from "this" class
        if (randomValue < 5) {
            sex = partner.getSex();
            hairLength = partner.getHairLength();
            color = partner.getColor();
            foodCapacity = partner.getFoodCapacity();
        }
        else {
            sex = this.getSex();
            hairLength = this.getHairLength();
            color = this.getColor();
            foodCapacity = this.getFoodCapacity();
        }
        //Making sure we are able to reproduce.
        if (partner.getSex() !== this.sex) {
            return new GuineaPig(name, sex, color, hairLength, foodCapacity, this.pos.x, this.pos.y);
        }
    };
    return GuineaPig;
})(GameObject);
//# sourceMappingURL=GuineaPig.js.map